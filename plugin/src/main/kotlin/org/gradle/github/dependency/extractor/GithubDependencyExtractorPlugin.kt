/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gradle.github.dependency.extractor

import org.gradle.api.Plugin
import org.gradle.api.internal.GradleInternal
import org.gradle.api.invocation.Gradle
import org.gradle.api.provider.Provider
import org.gradle.api.provider.ProviderFactory
import org.gradle.github.dependency.extractor.internal.DependencyExtractorService
import org.gradle.github.dependency.extractor.internal.DependencyExtractorService_6_1
import org.gradle.internal.build.event.BuildEventListenerRegistryInternal
import org.gradle.internal.operations.BuildOperationListenerManager
import org.gradle.util.GradleVersion

/**
 * A plugin that extracts the dependencies from the Gradle build and exports it using the GitHub API format.
 */
@Suppress("unused")
class GithubDependencyExtractorPlugin : Plugin<Gradle> {

    override fun apply(gradle: Gradle) {
        val gradleVersion = GradleVersion.current()
        // Create the adapter based upon the version of Gradle
        val applicatorStrategy = when {
            gradleVersion >= GradleVersion.version("6.1") -> PluginApplicatorStrategy.PluginApplicatorStrategy_6_1
            else -> PluginApplicatorStrategy.DefaultPluginApplicatorStrategy
        }

        // Create the service
        val extractorServiceProvider = applicatorStrategy.createExtractorService(gradle)

        // Register the service to listen for Build Events
        applicatorStrategy.registerExtractorListener(gradle, extractorServiceProvider)

        // Register the shutdown hook that should execute at the completion of the Gradle build.
        applicatorStrategy.registerExtractorServiceShutdown(gradle, extractorServiceProvider)
    }

    /**
     * Adapters for creating the [DependencyExtractorService] and installing it into [Gradle] based upon the Gradle version.
     */
    interface PluginApplicatorStrategy {

        fun createExtractorService(
            gradle: Gradle
        ): Provider<out DependencyExtractorService>

        fun registerExtractorListener(
            gradle: Gradle,
            extractorServiceProvider: Provider<out DependencyExtractorService>
        )

        fun registerExtractorServiceShutdown(
            gradle: Gradle,
            extractorServiceProvider: Provider<out DependencyExtractorService>
        )

        object DefaultPluginApplicatorStrategy : PluginApplicatorStrategy {
            override fun createExtractorService(
                gradle: Gradle
            ): Provider<out DependencyExtractorService> {
                val providerFactory = (gradle as GradleInternal).services.get(ProviderFactory::class.java)
                // Create a constant value that the provider will always return
                val constantDependencyExtractorService = object : DependencyExtractorService() {}
                return providerFactory.provider { constantDependencyExtractorService }
            }

            override fun registerExtractorListener(
                gradle: Gradle,
                extractorServiceProvider: Provider<out DependencyExtractorService>
            ) {
                (gradle as GradleInternal)
                    .services
                    .get(BuildOperationListenerManager::class.java)
                    .addListener(extractorServiceProvider.get())
            }

            override fun registerExtractorServiceShutdown(
                gradle: Gradle,
                extractorServiceProvider: Provider<out DependencyExtractorService>
            ) {
                gradle.buildFinished {
                    extractorServiceProvider.get().close()
                    (gradle as GradleInternal)
                        .services
                        .get(BuildOperationListenerManager::class.java)
                        .removeListener(extractorServiceProvider.get())
                }
            }
        }

        @Suppress("ClassName")
        object PluginApplicatorStrategy_6_1 : PluginApplicatorStrategy {
            override fun createExtractorService(
                gradle: Gradle
            ): Provider<out DependencyExtractorService> {
                return gradle.sharedServices.registerIfAbsent(
                    "dependencyExtractorService",
                    DependencyExtractorService_6_1::class.java
                ) {}
            }

            override fun registerExtractorListener(
                gradle: Gradle,
                extractorServiceProvider: Provider<out DependencyExtractorService>
            ) {
                (gradle as GradleInternal)
                    .services
                    .get(BuildEventListenerRegistryInternal::class.java)
                    .onOperationCompletion(extractorServiceProvider)
            }

            override fun registerExtractorServiceShutdown(
                gradle: Gradle,
                extractorServiceProvider: Provider<out DependencyExtractorService>
            ) {
                // No-op as DependencyExtractorService is Auto-Closable
            }
        }
    }
}
